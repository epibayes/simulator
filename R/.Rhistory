initialization = simulator::recipe(
time = 0
),
running = simulator::recipe(
n_steps = n_steps
),
inputs = .x
))
#o = run_simulation(theta, env = .GlobalEnv,
#  initialization = sim_init, step = sim_step, writer = summarizer)
sim = simulation(theta[[1]], sim_init, sim_step, summarizer)
#' Combine environments in a hierarchy for passing simulation data
#'
#' @param output recipe used for defining output location parameters
#' @param shared recipe used for defining shared parameters
#' @param initialization recipe used for defining init parameters
#' @param running recipe used for defining run-time parameters
#' @param inputs list of variables passed in to all steps
#' @param .parent dev-side hook, parent of everything.
#' @return list of environments with specified nesting
#'
#' @export
parameters = function(
output = recipe(),
shared = recipe(),
initialization = recipe(),
running = recipe(),
inputs = list(),
.parent = rlang::env()
) {
root_ = rlang::new_environment(parent = .parent)
purrr::imap(inputs, ~ rlang::env_bind(root_, !!.y := .x))
output_ = rlang::new_environment(parent = root_)
shared_ = rlang::new_environment(parent = output_)
initialization_ = rlang::new_environment(parent = shared_)
running_ = rlang::new_environment(parent = shared_)
thetas = list(
root = root_,
output = output_,
shared = shared_,
initialization = initialization_,
running = running_)
output$execute(output_, root_)
shared$execute(shared_, root_)
initialization$execute(initialization_, root_)
running$execute(running_, root_)
return(thetas)
}
#' Run a simulation for a single set of parameters
#'
#' @param parameters see `parameters` function
#' @param initialization recipe for initializing sim population
#' @param step recipe for runnning the simulation
#' @param writer for recording simulation summaries
#' @return writer, post-application
#'
#' @export
simulation = function(
parameters,
initialization,
step,
writer = simulator::writer$new()
) {
writer$setup(parameters$output, parameters$root)
initialization$execute(parameters$initialization, parameters$root, parameters$running)
writer$record(parameters$running, parameters$root)
while(parameters$running$.continue) {
step$execute(parameters$running, parameters$root)
writer$record(parameters$running, parameters$root)
}
writer$finalize()
return(writer)
}
#' Run a full set of simulations on the given cluster.
#'
#' @param parameters, need to describe all info required for sim
#' @param env environment to pull additional variables from for each sim node.
#' @return same parameters as used
#'
#' @export
run_simulation = function(parameters, env = .GlobalEnv, ...) {
parallel::clusterExport(cl = get_cluster(), varlist = ls(env), envir = env)
parallel::clusterMap(cl = get_cluster(), fun = simulation,
parameters = parameters, MoreArgs = list(...))
return(parameters)
}
#' Parameter range construction
#'
#' Parameter range will be composed of n points including those
#' in the vector x.  Sub-lists are processed via recursion using purrr::map
#'
#' @param x points to include in the range, or a list of such vectors
#' @param n number of total points filled in by interpolating between x
#' @return vector of parameters of length n
#'
#' @export
parameter_range = function(x, n) {
if (class(x) == 'list') {
x = purrr::map(x, parameter_range, n = n)
return(x)
}
x = sort(x) %>% unique()
if (length(x) == 0) {
stop("Must provide at least one default parameter value.")
}
if (length(x) == 1) {
return(rep(x, n))
}
if (length(x) >= n) {
return(x)
}
i = 1
pts = x
while(length(pts) < n) {
if (i > length(pts)) {
i = 1
}
new_pts = mean(pts[i:(i + 1)])
pts = c(pts, new_pts)
i = i + 1
}
pts = sort(pts) %>% unique()
return(pts)
}
#' FIXME: Bro, write the tests don't just leave this here
#purrr::map(1:10, ~ parameter_range(c(0, 5, 10), .x))
#purrr::map(1:10, ~ parameter_range(c(0, 5, 10), .x)) %>% purrr::map(length)
#' Classes used to indicate categories
#'
#' @name categorical_classes
#'
#' @export
categorical_classes = c('numeric', 'integer', 'character')
#' Expand parameter grid
#'
#' Inputs are a list of (optionally nested lists of) vectors and these are
#' expanded within-list using expand.grid and transformed to tibbles for
#' consistency.  Nesting remains to avoid creating the full (possible large)
#' tibble that represents the full parameter grid.
#'
#' @param x a list, optionally with nested lists, all named elements,
#'        and leaf elements must be vectors of 'numeric', 'integer', or
#'        'character' class.  They are expanded to all combinations
#'        in blocks (nested lists create blocking).
#' @return list of tibbles, with nesting in lists
#'
#' @export
expand_parameter_grid = function(x) {
x_ready = x %>%
purrr::keep(~ class(.x) %in% categorical_classes) %>%
purrr::lift_dl(expand.grid)(stringsAsFactors = FALSE) %>%
purrr::lift_dl(tibble::tibble)()
x_other_names = x %>%
purrr::discard(~ class(.x) %in% categorical_classes) %>%
names()
if (length(x_other_names) == 0) {
return(x_ready)
} else {
x_ready = list(core = x_ready)
}
x_other = x %>%
purrr::discard(~ class(.x) %in% categorical_classes) %>%
purrr::map(expand_parameter_grid) %>%
rlang::set_names(x_other_names)
for (i in seq_along(x_other)) {
cn = x_other_names[[i]]
x_ready[[cn]] = x_other[[i]]
}
return(x_ready)
}
#' Expand a flat list of tibbles
#'
#' The implied expansion is for each subsequent tibble to be inserted
#' as a list column into the first tibble.  This is the equivalent to
#' expand.grid on a (flat) list of tibbles).
#'
#' @param x a flat list of tibbles
#'
#' @return a single tibble with (likely) nested tibbles
#'
#' @export
expand_tibbles = function(x) {
if (length(x) <= 1) {
if ( rlang::is_list(x) &&
!rlang::is_tibble(x) &&
rlang::is_tibble(x[[1]])) {
x = x[[1]]
}
return(x)
}
chk = purrr::map_lgl(x, tibble::is_tibble) %>%
all() %>% isTRUE()
if (!chk) rlang::abort(
message = "`expand_tibbles` should only be called on a list of tibbles.",
class = 'wrong-args', arg = x)
if (length(x) == 2) {
tail_name = names(x[2])
tail_val = purrr::map(1:nrow(x[[1]]), ~ x[[2]])
x = x[[1]] %>% dplyr::mutate(!!tail_name := tail_val)
return(x)
}
x[2] = expand_tibbles(x[1:2])
x = expand_tibbles(x[-1])
return(x)
}
#' Flatten a list of (possibly nested list of) tibbles to a single tibble
#'
#' Nesting is preserved as nested list columns of tibbles
#'
#' @param a list of (possibly nested lists of ) tibbles
#' @return a single tibble with nested columns
#'
#' @export
expand_tibbles_nested = function(x) {
if (tibble::is_tibble(x)) {
return(x)
}
chk = purrr::map_lgl(x, ~ tibble::is_tibble(.x) || rlang::is_list(.x)) %>%
all() %>% isTRUE()
if (!chk) rlang::abort(
message = paste("`expand_tibbles_nested` should only be called on a list of nested",
"lists of tibbles."),
class = 'wrong-args', arg = x)
descend = purrr::map_lgl(x, ~ tibble::is_tibble(.x) %>% isFALSE())
if (any(descend)) {
x = x %>% purrr::map_if(descend, expand_tibbles_nested) %>%
expand_tibbles_nested()
} else {
x = expand_tibbles(x)
}
return(x)
}
#' Unnest all columns within a nested tibble recursively
#'
#' @param x a tibble
#' @return a tibble with no nested columns left
#'
#' @export
flatten_tibble = function(x) {
if (!tibble::is_tibble(x)) rlang::abort(
message = "'flatten_tibble' should only be called on a tibble",
class = 'wrong-args', arg = x)
nested_col_idx = purrr::detect_index(x, ~ class(.x) == 'list')
if (nested_col_idx > 0) {
x = tidyr::unnest(x, tidyselect::all_of(nested_col_idx)) %>%
flatten_tibble()
}
return(x)
}
#x = inputs[13:19] %>% expand_parameter_grid()
#o = expand_tibbles_nested(x)
library(testthat)
library(simulator)
test_check("simulator")
devtools::document()
install.packages("logger")
devtools::document()
rm(list = c("categorical_classes", "expand_parameter_grid", "expand_tibbles", "expand_tibbles_nested", "flatten_tibble", "parameter_range", "parameters", "run_simulation", "simulation"))
devtools::document()
devtools::document()
devtools::install();
devtools::document()
unloadNamespace('simulator')
#devtools::document(); devtools::install(); unloadNamespace('simulator'); devtools::test()
library(simulator)
library(magrittr)
library(ggplot2)
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
install.packages("workflow")
install.packages("workflows")
install.packages("workflows")
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
devtools::document()
devtools::install()
unloadNamespace('simulator')
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
install.packages("magrittr")
install.packages("magrittr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
theta_grid = list(
staff_prevalence = 0.05,
intake_prevalence = c(0.01, 0.1),
silent_rate = c(0.1, 0.4),
r0 = c(1.0, 3.0),
mean_latent_duration = c(2,5),
mean_disease_duration = c(10, 14),
test_sensitivity = list(rapid = c(0.30, 0.55), pcr = c(0.5, 0.7),
cxr_asymp = c(0.1, 0.2), cxr_symp = c(0.5, 0.65))
) %>% purrr::map(simulator::parameter_range, n = 3) %>%
purrr::map(unique) %>%
simulator::expand_parameter_grid() %>%
simulator::expand_tibbles_nested() %>%
tidyr::unnest(test_sensitivity) %>%
unique() %>%
dplyr::mutate(
simulation_name = "grid-test-1",
simulation_id = simulator::pad(1:dplyr::n(), nchar(dplyr::n())),
replicate_id = simulator::pad(1, 3),
n_intake_rate = 100,
n_staff = 3000,
n_steps = 365,
max_n_steps = 425,
seed = 33,
tb_rate = 0.001,
isolation_retest = 14,
output_root = workflow::build_dir(simulation_name, simulation_id, replicate_id)
) %>%
purrr::pmap(list)
