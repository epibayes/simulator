% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/single-state.R
\name{state}
\alias{state}
\title{R6 Class representing a single state variable (or factor) that
implements a limited but reasonably fast set of operations}
\description{
R6 Class representing a single state variable (or factor) that
implements a limited but reasonably fast set of operations

R6 Class representing a single state variable (or factor) that
implements a limited but reasonably fast set of operations
}
\details{
The supported operations include
\subsection{Initialize}{

Class is created from a state vector and (optionally) a set of
labels that can extend the states present in the vector.
}

\subsection{Append}{

The states are extended with a new state vector and (optionally)
a set of labels that can extend the states present in the vector.
}

\subsection{Bind}{

The states are extended with another state class (or vector)
}

\subsection{Bleb}{

The class splits off a set of rows (or levels) and returns those
while dropping them from the current object
}

\subsection{Drop}{

The rows (or levels) specified are dropped from the class
}

\subsection{Counts}{

The count of each state known to the class present currently is returned
}

\subsection{Which}{

The indexes in the state vector of a set of levels are returned
}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{index}}{return the index (into state vector) of known levels}

\item{\code{labels}}{return the known state level labels}

\item{\code{matrix}}{return the matrix representation of the state vector}

\item{\code{state}}{return the (implicit) state vector}

\item{\code{n_units}}{return the (implicit) number of units}

\item{\code{dims}}{return the (implicit) matrix representation dimensions}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{state$new()}}
\item \href{#method-append}{\code{state$append()}}
\item \href{#method-bind}{\code{state$bind()}}
\item \href{#method-bleb}{\code{state$bleb()}}
\item \href{#method-counts}{\code{state$counts()}}
\item \href{#method-drop}{\code{state$drop()}}
\item \href{#method-which}{\code{state$which()}}
\item \href{#method-clone}{\code{state$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new state container
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$new(x = NULL, labels = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{state vector to create the container from}

\item{\code{labels}}{set of state levels to include in addition to those
contained in the state vector.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new state object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\if{latex}{\out{\hypertarget{method-append}{}}}
\subsection{Method \code{append()}}{
Append a state vector to the current object and expand known labels
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$append(x, labels = character())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{state vector to append to the current representation}

\item{\code{labels}}{additional state levels, potentially not present in
current state vectors.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing useful
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-bind"></a>}}
\if{latex}{\out{\hypertarget{method-bind}{}}}
\subsection{Method \code{bind()}}{
Append another state representation to this one
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$bind(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{other state to append}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
combined representation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-bleb"></a>}}
\if{latex}{\out{\hypertarget{method-bleb}{}}}
\subsection{Method \code{bleb()}}{
Remove a set of rows (or state levels) from the current representation
and return it. Modifies the object internally.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$bleb(rows, levels)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rows}}{rows to split out}

\item{\code{levels}}{levels to split out}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
specified levels in their own object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-counts"></a>}}
\if{latex}{\out{\hypertarget{method-counts}{}}}
\subsection{Method \code{counts()}}{
Count the number of times (optionally) specified levels of the state
appear in the state vector
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$counts(levels)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{levels}}{state levels to include in the count}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
named vector of state counts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-drop"></a>}}
\if{latex}{\out{\hypertarget{method-drop}{}}}
\subsection{Method \code{drop()}}{
Remove a set of rows (or state levels) from the current representation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$drop(rows, levels)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rows}}{rows to split out}

\item{\code{levels}}{levels to split out}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self (modified)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-which"></a>}}
\if{latex}{\out{\hypertarget{method-which}{}}}
\subsection{Method \code{which()}}{
Calculate the index (into the state vector) of specified state levels
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$which(levels, .strict = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{levels}}{state levels whose position is retrieved}

\item{\code{.strict}}{if TRUE, check that levels exist in the current state,
FALSE by default.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
vector of indexes into the state vector
(internal) .vec state vector (as a character vector)
(internal) .matrix column-wise sparse matrix representing indicator variable coding
of the state vector
(internal) .n_units number of entries in the state vectors
(internal) .n_states number of total state levels in the state vector (whether
currently included in the vector or not).
(internal) .labels labels of the state levels (whether currently included in the
vector or not
(internal) .index named list stating which entries for each level appear in the
state vector.
(internal) implementation of blebbing rows
(internal) implementation of blebbing levels (defers to blebbing rows).
(internal) check that state vector indexes are valid
(internal) check that levels are valid
(internal) implementation of dropping rows
(internal) implementation of dropping levels
(internal) transform the matrix form of the state vector to an index and
return it
(internal) state to index
(internal) transform the index to row indexes
(internal) transform the index to col indexes
(internal) transform the index from of the state vecto to the matrix
form and return it
(internal) transform the index representation of the state vector to a
state vector and return it
(internal) probabilistic transition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{state$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
